name: 10 CI Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-test-docker:
    runs-on: ubuntu-latest
    environment: default
    steps:
      - uses: actions/checkout@v4

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: App Build & Sonar Cloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw clean install
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=TB-EIT_devsecops-sandbox
          echo '## Sonar Cloud Scan Quality Check' >> $GITHUB_STEP_SUMMARY
          echo '[![Quality gate](https://sonarcloud.io/api/project_badges/quality_gate?project=TB-EIT_devsecops-sandbox)](https://sonarcloud.io/summary/new_code?id=TB-EIT_devsecops-sandbox)' >> $GITHUB_STEP_SUMMARY

      - name: Upload App Jar Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webgoat-jar
          path: target/webgoat-*.jar

      - name: Build Docker image
        run: |
          docker build -f Dockerfile . -t tbeit/webgoat:$GITHUB_RUN_ID

      - name: Docker Hub Login
        run: |
          docker login -u tbeit -p ${{ secrets.DOCKER_PASSWORD }}
          echo '## Docker Scout Scan Results' >> $GITHUB_STEP_SUMMARY

      - name: Docker Scout Scan
        uses: docker/scout-action@v1.7.0
        with:
          command: quickview,cves,recommendations
          only-severities: critical,high
          # exit-code: true # Fails the whole job if the vulnerabilities are found

      - name: Push Docker Image to Docker Hub
        run: docker push tbeit/webgoat:$GITHUB_RUN_ID

  terraform-validate:
    runs-on: ubuntu-latest
    environment: default
    env:
      ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZ_SP_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_SP_CLIENT_SECRET }}
      TF_HOME: automation/iac/app_svc/terraform
      tf_backend_rg: ${{ secrets.AZ_TF_BACKEND_RG}}
      tf_backend_sa_name: ${{ secrets.AZ_TF_BACKEND_SA_NAME}}
      tf_backend_container: ${{ secrets.AZ_TF_BACKEND_CONTAINER}}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3

      # Will check Terraform Configuration Formatting
      # (any output of terraform fmt will be considered an error)
      - name: Terraform Format Check
        run: |
          echo "Running Terraform Format check in the following directory: $TF_HOME"
          cd $TF_HOME
          output=$(terraform fmt)
          if [ -z "$output" ]; then
            echo "Terraform Format check is successful."
          else
            echo "Terraform Format check failed for the following files:"
            echo "$output"
            exit 1
          fi
          cd -

      - name: Terraform Validate Check
        run: |
          cd $TF_HOME
          terraform init \
            -backend-config="resource_group_name=$tf_backend_rg" \
            -backend-config="storage_account_name=$tf_backend_sa_name" \
            -backend-config="container_name=$tf_backend_container" \
            -backend-config="key=webg-test.tfstate"
          terraform validate
          cd -

      - name: TFSec Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          additional_args: --custom-check-dir $TF_HOME

      - name: Upload Terraform Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform
          # Upload all .tf and .tfvars file in the terraform home, except .terraform directory
          path: |
            ${{env.TF_HOME}}/*.tf*
            !${{env.TF_HOME}}/.terraform
