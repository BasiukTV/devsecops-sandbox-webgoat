name: 20 CD Pipeline

on:
  workflow_run:
    workflows: ["10 CI Pipeline"] # This pipeline runs after the CI pipeline.
    types:
      - completed

jobs:
  test:
    runs-on: ubuntu-latest

    # Only run this job (and workflow) if initially triggered by push to main and CI workflow succeeded
    if: ${{ github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success' }}
    environment: default
    env:
      ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZ_SP_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_SP_CLIENT_SECRET }}
      TF_HOME: terraform
      tf_backend_rg: ${{ secrets.AZ_TF_BACKEND_RG}}
      tf_backend_sa_name: ${{ secrets.AZ_TF_BACKEND_SA_NAME}}
      tf_backend_container: ${{ secrets.AZ_TF_BACKEND_CONTAINER}}
      RUN_ID: ${{ github.event.workflow_run.id }}

    steps:
      - uses: hashicorp/setup-terraform@v3

      - name: Downloading Terraform Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform
          path: ${{ env.TF_HOME }}
          run-id: ${{ env.RUN_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Init
        run: |
          cd $TF_HOME
          terraform -version
          terraform init \
            -backend-config="resource_group_name=$tf_backend_rg" \
            -backend-config="storage_account_name=$tf_backend_sa_name" \
            -backend-config="container_name=$tf_backend_container" \
            -backend-config="key=webg-test.tfstate"
          cd - >/dev/null

      - name: Terraform Plan
        run: |
          cd $TF_HOME

          terraform plan -var-file=test.tfvars -out=plan.out

          echo '## Terraform Plan Summary' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform show -no-color plan.out >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          cd - >/dev/null

      - name: Terraform Apply
        run: |
          cd $TF_HOME
          terraform apply --auto-approve plan.out

          mkdir out
          terraform output -raw rg_name > out/rg_name.txt
          terraform output -raw app_svc_plan_name > out/app_svc_plan_name.txt
          terraform output -raw app_svc_name > out/app_svc_name.txt

          cd - >/dev/null

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}'

      - name: Azure CLI App Deployment
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            cd $TF_HOME
            az webapp create \
              --name $(cat out/app_svc_name.txt) \
              --plan $(cat out/app_svc_plan_name.txt) \
              --resource-group $(cat out/rg_name.txt) \
              --deployment-container-image-name docker.io/tbeit/webgoat:$RUN_ID
            cd - >/dev/null
